amcl:
    ros__parameters:
        alpha1: 0.2
        alpha2: 0.2
        alpha3: 0.2
        alpha4: 0.2
        alpha5: 0.2
        base_frame_id: base_footprint
        beam_skip_distance: 0.5
        beam_skip_error_threshold: 0.9
        beam_skip_threshold: 0.3
        do_beamskip: false
        global_frame_id: map
        lambda_short: 0.1
        laser_likelihood_max_dist: 2.0
        laser_max_range: 100.0
        laser_min_range: -1.0
        laser_model_type: "likelihood_field"
        max_beams: 180
        max_particles: 2000
        min_particles: 500
        odom_frame_id: odom
        pf_err: 0.05
        pf_z: 0.99
        recovery_alpha_fast: 0.0
        recovery_alpha_slow: 0.0
        resample_interval: 1
        robot_model_type: "nav2_amcl::DifferentialMotionModel"
        save_pose_rate: 0.5
        sigma_hit: 0.2
        tf_broadcast: true
        transform_tolerance: 1.0
        update_min_a: 0.1
        update_min_d: 0.15
        z_hit: 0.5
        z_max: 0.05
        z_rand: 0.5
        z_short: 0.05
        scan_topic: /laser_scan
        map_topic: /map
        set_initial_pose: true
        initial_pose:
            x: 0.0
            y: 0.0
            z: 0.25
            yaw: 0.0

bt_navigator:
    ros__parameters:
        global_frame: map
        robot_base_frame: mobile_robot_base_link
        odom_topic: /odometry
        bt_loop_duration: 10 # ms
        default_server_timeout: 20 # ms
        wait_for_server_timeout: 1000 # ms
        action_server_result_timeout: 60.0 # s
        transform_tolerance: 0.1 # s
        navigators: ["navigate_to_pose", "navigate_through_poses"]
        navigate_to_pose:
            plugin: "nav2_bt_navigator/NavigateToPoseNavigator"
        navigate_through_poses:
            plugin: "nav2_bt_navigator/NavigateThroughPosesNavigator"
        # default behavior tree definitions
        #default_nav_to_pose_bt_xml: $(find-pkg-share nav2_bt_navigator)/behavior_trees/navigate_to_pose_w_replanning_and_recovery.xml
        default_nav_through_poses_bt_xml: $(find-pkg-share nav2_bt_navigator)/behavior_trees/navigate_through_poses_w_replanning_and_recovery.xml
        # custom behavior tree definition
        default_nav_to_pose_bt_xml: $(find-pkg-share scout_nav2)/params/bt_nav2pose.xml
        
        plugin_lib_names:
            - nav2_compute_path_to_pose_action_bt_node
            - nav2_compute_path_through_poses_action_bt_node
            - nav2_smooth_path_action_bt_node
            - nav2_follow_path_action_bt_node
            - nav2_spin_action_bt_node
            - nav2_wait_action_bt_node
            - nav2_assisted_teleop_action_bt_node
            - nav2_back_up_action_bt_node
            - nav2_drive_on_heading_bt_node
            - nav2_clear_costmap_service_bt_node
            - nav2_is_stuck_condition_bt_node
            - nav2_goal_reached_condition_bt_node
            - nav2_goal_updated_condition_bt_node
            - nav2_globally_updated_goal_condition_bt_node
            - nav2_is_path_valid_condition_bt_node
            - nav2_are_error_codes_active_condition_bt_node
            - nav2_would_a_controller_recovery_help_condition_bt_node
            - nav2_would_a_planner_recovery_help_condition_bt_node
            - nav2_would_a_smoother_recovery_help_condition_bt_node
            - nav2_initial_pose_received_condition_bt_node
            - nav2_reinitialize_global_localization_service_bt_node
            - nav2_rate_controller_bt_node
            - nav2_distance_controller_bt_node
            - nav2_speed_controller_bt_node
            - nav2_truncate_path_action_bt_node
            - nav2_truncate_path_local_action_bt_node
            - nav2_goal_updater_node_bt_node
            - nav2_recovery_node_bt_node
            - nav2_pipeline_sequence_bt_node
            - nav2_round_robin_node_bt_node
            - nav2_transform_available_condition_bt_node
            - nav2_time_expired_condition_bt_node
            - nav2_path_expiring_timer_condition
            - nav2_distance_traveled_condition_bt_node
            - nav2_single_trigger_bt_node
            - nav2_goal_updated_controller_bt_node
            - nav2_is_battery_low_condition_bt_node
            - nav2_navigate_through_poses_action_bt_node
            - nav2_navigate_to_pose_action_bt_node
            - nav2_remove_passed_goals_action_bt_node
            - nav2_planner_selector_bt_node
            - nav2_controller_selector_bt_node
            - nav2_goal_checker_selector_bt_node
            - nav2_controller_cancel_bt_node
            - nav2_path_longer_on_approach_bt_node
            - nav2_wait_cancel_bt_node
            - nav2_spin_cancel_bt_node
            - nav2_back_up_cancel_bt_node
            - nav2_assisted_teleop_cancel_bt_node
            - nav2_drive_on_heading_cancel_bt_node
            - nav2_is_battery_charging_condition_bt_node
        error_code_names:
            - compute_path_error_code
            - follow_path_error_code

controller_server:
    ros__parameters:
        controller_frequency: 20.0
        min_x_velocity_threshold: 0.001
        min_y_velocity_threshold: 0.5
        min_theta_velocity_threshold: 0.001
        failure_tolerance: 0.3
        progress_checker_plugins: ["progress_checker"]
        goal_checker_plugins: ["goal_checker"]
        controller_plugins: ["FollowPath"]
        use_realtime_priority: false
        odom_topic: /odometry

        # Progress checker parameters
        progress_checker:
            plugin: "nav2_controller::SimpleProgressChecker"
            required_movement_radius: 0.3
            movement_time_allowance: 10.0
        # Goal checker parameters
        goal_checker:
            stateful: True
            plugin: "nav2_controller::SimpleGoalChecker"
            xy_goal_tolerance: 0.25
            yaw_goal_tolerance: 0.25

        FollowPath:
            # combination of 2 local planners: rotation shim controller and MPPI controller
            plugin: "nav2_rotation_shim_controller::RotationShimController"
            primary_controller: "nav2_mppi_controller::MPPIController"

            # Rotation shim controller parameters
            # Backup controller for rotation in place when angular heading error is larger than threshold
            # https://navigation.ros.org/configuration/packages/configuring-rotation-shim-controller.html
            angular_dist_threshold: 0.2 # (radians) threshold for switching to rotation in place
            forward_sampling_distance: 0.5
            rotate_to_heading_angular_vel: 1.8
            max_angular_accel: 2.0
            simulate_ahead_time: 3.0

            # MPPI Controller parameters: local planner (controller)
            # https://navigation.ros.org/configuration/packages/configuring-mppic.html
            time_steps: 200
            model_dt: 0.05
            batch_size: 1000
            vx_std: 0.2
            vy_std: 0.2
            wz_std: 0.4
            vx_max: 0.5
            vx_min: -0.5
            vy_max: 0.5
            wz_max: 1.9
            iteration_count: 1
            temperature: 0.3
            gamma: 0.015
            visualize: False # True for debugging only (will degrade performance)
            retry_attempt_limit: 1
            regenerate_noises: false

            # trajectory visualization parameters (when visualize is true)
            TrajectoryVisualizer:
                trajectory_step: 20
                time_step: 5
            # path handler
            transform_tolerance: 0.1
            prune_distance: 1.5
            enforce_path_inversion: true
            inversion_xy_tolerance: 0.2
            inversion_yaw_tolerance: 0.4
            # Ackermann motion model used by MPPI controller in contrast to in-place rotation shim controller
            motion_model: "Ackermann"
            AckermannConstraints:
                min_turning_r: 0.2
            critics: [
                    "ConstraintCritic", #This critic penalizes trajectories that have components outside of the set dynamic or kinematic constraints
                    "ObstaclesCritic", #This critic incentivizes navigating away from obstacles and critical collisions using either a circular robot point-check or full SE2 footprint check.
                    "GoalCritic", #This critic incentivizes navigating spatially towards the goal when in reasonable proximity to goal
                    "GoalAngleCritic", #This critic incentivizes navigating to achieve the angle of the goal posewhen in reasonable proximity to goal
                    "PathAlignCritic", #This critic incentivizes aligning with the global path, if relevant. It does not implement path following behavior.
                    "PathFollowCritic", #This critic incentivizes making progress along the path. This is what drives the robot forward along the path.
                    "PathAngleCritic", #This critic penalizes trajectories at a high relative angle to the path. This helps the robot make sharp turns when necessary due to large accumulated angular errors.
                    "PreferForwardCritic", #This critic incentivizes moving in the forward direction, rather than reversing.
                    #"TwirlingCritic" # This critic penalizes unnecessary ‘twisting’ with holonomic vehicles. It adds a constraint on the rotation angle to keep it consistent.
                ]
            ConstraintCritic:
                enabled: true
                cost_power: 1
                cost_weight: 4.0
            GoalCritic:
                enabled: true
                cost_power: 1
                cost_weight: 5.0
                threshold_to_consider: 1.4
            GoalAngleCritic:
                enabled: true
                cost_power: 1
                cost_weight: 3.0
                threshold_to_consider: 0.5
            PreferForwardCritic:
                enabled: true
                cost_power: 1
                cost_weight: 1.0
                threshold_to_consider: 0.5
            ObstaclesCritic:
                enabled: true
                cost_power: 1
                repulsion_weight: 1.5
                critical_weight: 20.0
                consider_footprint: true
                collision_cost: 10000.0
                collision_margin_distance: 0.5
                near_goal_distance: 1.0
                #inflation_radius: 0.6 # (only in Humble)
                #cost_scaling_factor: 2.0 # (only in Humble)
            PathAlignCritic:
                enabled: true
                cost_power: 1
                cost_weight: 20.0
                max_path_occupancy_ratio: 0.05
                trajectory_point_step: 3
                threshold_to_consider: 1.0
                offset_from_furthest: 30
                use_path_orientations: true
            PathFollowCritic:
                enabled: true
                cost_power: 1
                cost_weight: 4.0
                offset_from_furthest: 6
                threshold_to_consider: 1.4
            PathAngleCritic:
                enabled: true
                cost_power: 1
                cost_weight: 4.0
                offset_from_furthest: 4
                threshold_to_consider: 0.5
                max_angle_to_furthest: 0.7
                mode: 2
            TwirlingCritic:
                enabled: true
                twirling_cost_power: 1
                twirling_cost_weight: 10.0

            
local_costmap:
    local_costmap:
        ros__parameters:
            update_frequency: 5.0
            publish_frequency: 2.0
            global_frame: odom
            robot_base_frame: mobile_robot_base_link
            map_topic: /map
            rolling_window: true
            width: 5
            height: 5
            resolution: 0.05
            footprint: "[ [0.45, 0.35], [0.45, -0.35], [-0.45, -0.35], [-0.45, 0.35] ]"
            footprint_padding: 0.02
            lethal_cost_threshold: 100
            track_unknown_space: true

            plugins: ["obstacle_layer", "inflation_layer"]

            obstacle_layer:
                plugin: "nav2_costmap_2d::ObstacleLayer"
                enabled: True
                observation_sources: scan
                scan:
                    topic: /laser_scan
                    min_obstacle_height: 0.1
                    max_obstacle_height: 2.0
                    clearing: True
                    marking: True
                    data_type: "LaserScan"
                    raytrace_max_range: 15.0
                    raytrace_min_range: 0.0
                    obstacle_max_range: 12.0
                    obstacle_min_range: 0.0
                    inf_is_valid: false

            inflation_layer:
                plugin: "nav2_costmap_2d::InflationLayer"
                cost_scaling_factor: 2.0
                inflation_radius: 0.6
            always_send_full_costmap: True

global_costmap:
    global_costmap:
        ros__parameters:
            update_frequency: 1.0
            publish_frequency: 1.0
            global_frame: map
            robot_base_frame: mobile_robot_base_link
            map_topic: /map
            rolling_window: true
            footprint: "[ [0.45, 0.35], [0.45, -0.35], [-0.45, -0.35], [-0.45, 0.35] ]"
            footprint_padding: 0.02
            resolution: 0.05
            width: 12
            height: 12
            track_unknown_space: true
            lethal_cost_threshold: 100

            plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
            static_layer:
                plugin: "nav2_costmap_2d::StaticLayer"
                map_subscribe_transient_local: True
                enabled: true
                subscribe_to_updates: true
                transform_tolerance: 0.1
                map_topic: /map

            obstacle_layer:
                plugin: "nav2_costmap_2d::ObstacleLayer"
                enabled: True
                observation_sources: scan
                scan:
                    topic: /laser_scan
                    min_obstacle_height: 0.1
                    max_obstacle_height: 2.0
                    clearing: True
                    marking: True
                    data_type: "LaserScan"
                    raytrace_max_range: 15.0
                    raytrace_min_range: 0.0
                    obstacle_max_range: 12.0
                    obstacle_min_range: 0.0
                    inf_is_valid: false

            inflation_layer:
                plugin: "nav2_costmap_2d::InflationLayer"
                cost_scaling_factor: 2.0
                inflation_radius: 0.6
            always_send_full_costmap: True

map_saver:
    ros__parameters:
        save_map_timeout: 5.0
        free_thresh_default: 0.25
        occupied_thresh_default: 0.65
        map_subscribe_transient_local: True

map_server:
    ros__parameters:
        topic_name: /map
        frame_id: map
        #yaml_filename: "~/siri/src/siri_nav2/maps/map.yaml"

planner_server:
    ros__parameters:
        expected_planner_frequency: 20.0
        planner_plugins: ["GridBased"]
        GridBased:
            plugin: "nav2_smac_planner/SmacPlannerHybrid"
            downsample_costmap: false # whether or not to downsample the map
            downsampling_factor: 1 # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
            tolerance: 0.25 # dist-to-goal heuristic cost (distance) for valid tolerance endpoints if exact goal cannot be found.
            allow_unknown: true # allow traveling in unknown space
            max_iterations: 1000000 # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
            max_on_approach_iterations: 1000 # Maximum number of iterations after within tolerances to continue to try to find exact solution
            max_planning_time: 10.0 # max time in s for planner to plan, smooth
            motion_model_for_search: "DUBIN" # Hybrid-A* Dubin, Redds-Shepp
            angle_quantization_bins: 64 # Number of angle bins for search
            analytic_expansion_ratio: 3.5 # The ratio to attempt analytic expansions during search for final approach.
            analytic_expansion_max_length: 3.0 # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
            minimum_turning_radius: 0.2 # minimum turning radius in m of path / vehicle
            reverse_penalty: 2.0 # Penalty to apply if motion is reversing, must be => 1
            change_penalty: 0.0 # Penalty to apply if motion is changing directions (L to R), must be >= 0
            non_straight_penalty: 1.2 # Penalty to apply if motion is non-straight, must be => 1
            cost_penalty: 2.0 # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
            retrospective_penalty: 0.015
            lookup_table_size: 20.0 # Size of the dubin/reeds-sheep distance window to cache, in meters.
            cache_obstacle_heuristic: false # Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
            debug_visualizations: false # For Hybrid nodes: Whether to publish expansions on the /expansions topic as an array of poses (the orientation has no meaning) and the path's footprints on the /planned_footprints topic. WARNING: heavy to compute and to display, for debug only as it degrades the performance.
            use_quadratic_cost_penalty: False
            downsample_obstacle_heuristic: True
            allow_primitive_interpolation: False
            smooth_path: True # If true, does a simple and quick smoothing post-processing to the path
            smoother:
                max_iterations: 100
                w_smooth: 0.3
                w_data: 0.2
                tolerance: 1.0e-10
                do_refinement: true
                refinement_num: 2

smoother_server:
    ros__parameters:
        robot_base_frame: mobile_robot_base_link
        footprint_topic: “global_costmap/published_footprint”
        costmap_topic: “global_costmap/costmap_raw”
        smoother_plugins: ["ConstrainedSmootherPlugin"]
        ConstrainedSmootherPlugin:
            plugin: "nav2_constrained_smoother/ConstrainedSmoother"
            reversing_enabled: true # whether to detect forward/reverse direction and cusps. Should be set to false for paths without orientations assigned
            path_downsampling_factor: 3 # every n-th node of the path is taken. Useful for speed-up
            path_upsampling_factor: 1 # 0 - path remains downsampled, 1 - path is upsampled back to original granularity using cubic bezier, 2... - more upsampling
            keep_start_orientation: true # whether to prevent the start orientation from being smoothed
            keep_goal_orientation: true # whether to prevent the gpal orientation from being smoothed
            minimum_turning_radius: 0.0 # minimum turning radius the robot can perform. Can be set to 0.0 (or w_curve can be set to 0.0 with the same effect) for diff-drive/holonomic robots
            w_curve: 30.0 # weight to enforce minimum_turning_radius
            w_dist: 0.0 # weight to bind path to original as optional replacement for cost weight
            w_smooth: 200.0 # weight to maximize smoothness of path
            w_cost: 500.0 # weight to steer robot away from collision and cost

            # Parameters used to improve obstacle avoidance near cusps (forward/reverse movement changes)
            w_cost_cusp_multiplier: 3.0 # option to use higher weight during forward/reverse direction change which is often accompanied with dangerous rotations
            cusp_zone_length: 2.5 # length of the section around cusp in which nodes use w_cost_cusp_multiplier (w_cost rises gradually inside the zone towards the cusp point, whose costmap weight eqals w_cost*w_cost_cusp_multiplier)

            # Points in robot frame to grab costmap values from. Format: [x1, y1, weight1, x2, y2, weight2, ...]
            # IMPORTANT: Requires much higher number of iterations to actually improve the path. Uncomment only if you really need it (highly elongated/asymmetric robots)
            # cost_check_points: [-0.185, 0.0, 1.0]

            optimizer:
                linear_solver_type: SPARSE_NORMAL_CHOLESKY
                max_iterations: 70 # max iterations of smoother
                debug_optimizer: false # print debug info

behavior_server:
    ros__parameters:
        local_costmap_topic: local_costmap/costmap_raw
        global_costmap_topic: global_costmap/costmap_raw
        local_footprint_topic: local_costmap/published_footprint
        global_footprint_topic: global_costmap/published_footprint
        cycle_frequency: 10.0
        behavior_plugins:
            ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
        spin:
            plugin: "nav2_behaviors/Spin"
        backup:
            plugin: "nav2_behaviors/BackUp"
        drive_on_heading:
            plugin: "nav2_behaviors/DriveOnHeading"
        wait:
            plugin: "nav2_behaviors/Wait"
        assisted_teleop:
            plugin: "nav2_behaviors/AssistedTeleop"
        local_frame: odom
        global_frame: map
        robot_base_frame: mobile_robot_base_link
        transform_tolerance: 0.1
        simulate_ahead_time: 2.0
        max_rotational_vel: 0.8
        min_rotational_vel: 0.2
        rotational_acc_lim: 2.0

waypoint_follower:
    ros__parameters:
        loop_rate: 20
        stop_on_failure: false
        action_server_result_timeout: 900.0
        waypoint_task_executor_plugin: "wait_at_waypoint"
        wait_at_waypoint:
            plugin: "nav2_waypoint_follower::WaitAtWaypoint"
            enabled: True
            waypoint_pause_duration: 200

velocity_smoother:
    ros__parameters:
        smoothing_frequency: 20.0
        scale_velocities: False
        feedback: "OPEN_LOOP"
        max_velocity: [0.3, 0.0, 0.5]
        min_velocity: [-0.3, 0.0, -0.5]
        max_accel: [2.5, 0.0, 2.0]
        max_decel: [-2.5, 0.0, -2.0]
        odom_topic: /odometry
        odom_duration: 0.1
        deadband_velocity: [0.0, 0.0, 0.0]
        velocity_timeout: 1.0

slam_toolbox:
    ros__parameters:
        # Plugin params
        solver_plugin: solver_plugins::CeresSolver
        ceres_linear_solver: SPARSE_NORMAL_CHOLESKY
        ceres_preconditioner: SCHUR_JACOBI
        ceres_trust_strategy: LEVENBERG_MARQUARDT
        ceres_dogleg_type: TRADITIONAL_DOGLEG
        ceres_loss_function: CauchyLoss

        # ROS Parameters
        odom_frame: odom
        map_frame: map
        base_frame: base_footprint # --> base_footprint
        scan_topic: /laser_scan # --> /scan
        use_map_saver: true
        mode: mapping #localization

        # if you'd like to immediately start continuing a map at a given pose
        # or at the dock, but they are mutually exclusive, if pose is given
        # will use pose
        #map_file_name: test_steve
        #map_start_pose: [0.0, 0.0, 0.0]
        #map_start_at_dock: true

        debug_logging: false
        throttle_scans: 1
        transform_publish_period: 0.02 #if 0 never publishes odometry
        map_update_interval: 5.0
        resolution: 0.05
        max_laser_range: 16.0 #for rastering images
        minimum_time_interval: 0.5
        transform_timeout: 0.2
        tf_buffer_duration: 30.
        stack_size_to_use: 40000000 #// program needs a larger stack size to serialize large maps
        enable_interactive_mode: true

        # General Parameters
        use_scan_matching: true
        use_scan_barycenter: true
        minimum_travel_distance: 0.5
        minimum_travel_heading: 0.5
        scan_buffer_size: 10
        scan_buffer_maximum_scan_distance: 10.0
        link_match_minimum_response_fine: 0.1
        link_scan_maximum_distance: 1.5
        loop_search_maximum_distance: 3.0
        do_loop_closing: true
        loop_match_minimum_chain_size: 10
        loop_match_maximum_variance_coarse: 3.0
        loop_match_minimum_response_coarse: 0.35
        loop_match_minimum_response_fine: 0.45

        # Correlation Parameters - Correlation Parameters
        correlation_search_space_dimension: 0.5
        correlation_search_space_resolution: 0.01
        correlation_search_space_smear_deviation: 0.1

        # Correlation Parameters - Loop Closure Parameters
        loop_search_space_dimension: 8.0
        loop_search_space_resolution: 0.05
        loop_search_space_smear_deviation: 0.03

        # Scan Matcher Parameters
        distance_variance_penalty: 0.5
        angle_variance_penalty: 1.0

        fine_search_angle_offset: 0.00349
        coarse_search_angle_offset: 0.349
        coarse_angle_resolution: 0.0349
        minimum_angle_penalty: 0.9
        minimum_distance_penalty: 0.5
        use_response_expansion: true

collision_monitor:
    ros__parameters:
        base_frame_id: "base_footprint"
        odom_frame_id: "odom"
        cmd_vel_in_topic: "cmd_vel_smoothed"
        cmd_vel_out_topic: "cmd_vel"
        state_topic: "collision_monitor_state"
        transform_tolerance: 0.5
        source_timeout: 5.0
        base_shift_correction: True
        stop_pub_timeout: 2.0
        use_realtime_priority: false
        
        polygons: ["FootprintStop", "FootprintSlowdown", "FootprintApproach"]
        FootprintStop:
            # Define a zone and a point threshold. If min_points or more obstacle points appear inside this area, stop the robot until the obstacles will disappear.
            type: "polygon"
            points: [0.48, 0.38, 0.48, -0.38, -0.48, -0.38, -0.48, 0.38]
            action_type: "stop"
            min_points: 4 # max_points: 3 for Humble
            visualize: True
            polygon_pub_topic: "/polygon_stop"
            enabled: True

        FootprintSlowdown:
            # Define a zone around the robot and slow the maximum speed for a slowdown_ratio, if min_points or more points will appear inside the area.
            type: "polygon"
            points: [0.65, 0.55, 0.65, -0.55, -0.65, -0.55, -0.65, 0.55]
            action_type: "slowdown"
            min_points: 4 # max_points: 3 for Humble
            slowdown_ratio: 0.5
            visualize: True
            polygon_pub_topic: "/polygon_slowdown"
            enabled: True

        FootprintApproach:
            # Using the current robot speed, estimate the time to collision to sensor data. The robot will slow such that it is now at least time_before_collision seconds to collision.
            type: "polygon"
            action_type: "approach"
            points: [0.70, 0.60, 0.70, -0.60, -0.70, -0.60, -0.70, 0.60]
            time_before_collision: 2.0
            simulation_time_step: 0.02
            min_points: 6 # max_points: 5 for Humble
            visualize: True
            enabled: False
            
        observation_sources: ["scan"]
        scan:
            source_timeout: 0.2
            type: "scan"
            topic: "/laser_scan"
            min_height: 0.0
            max_height: 2.0
            enabled: True
